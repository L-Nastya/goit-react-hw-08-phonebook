{"version":3,"file":"static/js/4.dc0d6bcf.chunk.js","mappings":"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","sources":["components/Section/Section.jsx","components/MyContactPage/ContactForm/ContactForm.jsx","components/MyContactPage/ContactList/ContactList.jsx","components/Filter/Filter.jsx","components/loader/loader.jsx","redux/contacts/contacts-selectors.js","redux/filter/filter-selector.js","redux/loader/loader-selector.js","components/MyContactPage/myContactPge.jsx"],"sourcesContent":["import PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\n\nfunction Section({ title, children }) {\n  \n    return (\n      <div>\n      <Title>{title}</Title>\n        {children}      \n       </div>\n    )\n \n}\n\nSection.propTypes = {\n    title: PropTypes.string.isRequired,\n    children: PropTypes.node,\n}\n\nexport default Section;\n\nconst Title = styled.h2`\n  text-align: center;\n  font-size: 30px;\n`","import { React } from \"react\";\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { useState } from \"react\";\nimport shortid from \"shortid\";\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\";\n\n\nconst ContactForm =({contacts, onSubmit})=>{\n    const [name, setName] = useState('');\n    const [number, setNumber] = useState('');\n\n   const nameInputId = shortid.generate();\n   const numberInputId = shortid.generate();\n\n    const updateInput = event => {\n        switch (event.target.name) {\n            case 'name':\n                setName(event.target.value)\n                break;\n            case 'number':\n                setNumber(event.target.value)\n                break;\n            default:\n                return;\n        }\n    };\n    const submitForm = (e) => {\n        e.preventDefault();\n        if (contacts.find(contact => contact.name === name)) {\n            toast.warn(`Contact ${name} is already in your list`);\n            return;\n        }\n        onSubmit(name,number)\n        reset();\n    };\n    const reset = () => {\n        setName('' )\n        setNumber( '')\n    }\n\n        return (\n            <Form onSubmit={submitForm}>\n                 <FormLabel htmlFor={nameInputId}>Name\n                 <FormInput\n                     type=\"text\"\n                     name=\"name\"\n                     id={nameInputId}\n                     value={name}\n                     onChange ={updateInput}\n                     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                     title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                     required\n                    />\n                 </FormLabel>\n                 <FormLabel htmlFor={numberInputId}>Phone\n                  <FormInput\n                     type=\"tel\"\n                     name=\"number\"\n                     id={numberInputId}\n                     value={number}\n                     onChange ={updateInput}\n                     pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n                     title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n                     required\n                    />\n                 </FormLabel>\n                <FormBtn type=\"submit\">ADD CONTACT</FormBtn>\n            </Form>\n            \n        )\n    }\n\nContactForm.propTypes = {\n    onSubmit: PropTypes.func.isRequired,\n}\nexport default ContactForm;\n\nconst Form = styled.form`\n    display: grid;\n    \n`;\nconst FormLabel = styled.label`\n  display: flex;\n  justify-content: center;\n  font-size: 25px;\n  margin-bottom: 15px;\n`;\nconst FormInput = styled.input`\n margin-left: 20px;\n box-shadow:  0 4px 8px 0 rgba(0,0,0,0.2);\n    transition: 0.3s;\n    border-radius: 2px;\n    border: none;\n`;\n\nconst FormBtn = styled.button`\n    border: none;\n    border-radius: 5px;\n    font-size: 25px;\n    background-color: #fdfda3;\n    box-shadow:  0 4px 8px 0 rgba(0,0,0,0.2);\n    transition: 0.3s;\n     &:hover{\n    background-color: #f3da90;\n     transform: scale(1.02);\n }\n`;","import { React } from \"react\";\nimport PropTypes from 'prop-types';\nimport styled from \"styled-components\";\n\nconst ContactList = ({contacts, onDelete}) => (\n        <ul>\n            {contacts.map(({ id, name, number }) => (\n                <ListItem key={id}>{name}: {number}\n                <ListBtn type=\"button\" onClick={() => onDelete(id)}>Delete</ListBtn>\n                </ListItem>))}\n        \n    </ul>\n)\nContactList.propTypes = {\n    contacts: PropTypes.arrayOf(\n        PropTypes.shape({\n          id: PropTypes.string,\n          name: PropTypes.string,\n          number: PropTypes.string,\n        })).isRequired,\n    onDelete: PropTypes.func.isRequired,\n}\nexport default ContactList;\n\nconst ListItem = styled.li`\nwidth: 85%;\n    font-size: 25px;\n    justify-content: space-between;\n    margin-bottom: 10px;\n    display: flex;\n    border-radius: 5px;\n\n`;\nconst ListBtn = styled.button`\n    margin-right: 0;\n    width: 15%;\n    border: none;\n    border-radius: 5px;\n    font-size: 20px;\n    background-color: #fcb8b8;\n     &:hover{\n     background-color: #f93636;\n     transform: scale(1.1);\n }\n`;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styled from 'styled-components';\n\nconst Filter = ({ value, onChange }) => (\n  <FilterLabel>\n    Filter\n    <FilterInput type=\"text\" value={value} onChange={onChange} />\n  </FilterLabel>\n);\nFilter.propTypes = {\n    value: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n}\nexport default Filter;\n\nconst FilterLabel = styled.label`\n  display: flex;\n  justify-content: center;\n  font-size: 25px;\n`;\nconst FilterInput = styled.input`\n  margin-left: 20px;\n  box-shadow:  0 4px 8px 0 rgba(0,0,0,0.2);\n  transition: 0.3s;\n  border-radius: 2px;\n  border: none;\n`;","import { ColorRing } from 'react-loader-spinner';\nimport styled from \"styled-components\";\n\nconst Loader =()=> {\n    return (\n        <Load><ColorRing/></Load>\n        \n    )\n}\n\nexport default Loader\n\nconst Load = styled.span`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`;","export const getContacts = ({contacts}) => contacts.items;\n\nexport const getFilteredContacts = ({contacts, filter}) => {\n    if(!filter) {\n        return contacts.items;\n    }\n    const normalizedFilter = filter.toLowerCase();\n    const result = contacts.items.filter(({name}) => {\n        const normalizedName = name.toLowerCase();\n        return (normalizedName.includes(normalizedFilter))\n    });\n\n    return result;\n}\n\n","export const getFilter = ({filter}) => filter;","export const getLoader = ({ contacts }) => contacts.loading;","import Section from \"../Section/Section\";\nimport ContactForm from \"./ContactForm/ContactForm\";\nimport ContactList from \"./ContactList/ContactList\";\nimport Filter from \"../Filter/Filter\";\nimport Loader from \"../loader/loader\";\nimport styled from \"styled-components\";\n\n\nimport { useEffect } from \"react\";\n\nimport { useSelector, useDispatch } from \"react-redux\";\n\nimport { addContact, deleteContact, fetchContacts} from \"../../redux/contacts/contacts-operations\";\nimport { changeFilter } from \"../../redux/filter/filter-actions\"; \nimport { getFilteredContacts } from \"../../redux/contacts/contacts-selectors\"; \nimport { getFilter } from \"../../redux/filter/filter-selector\";\nimport { getLoader } from \"../../redux/loader/loader-selector\";\n\nconst MyContactPage = () => {\n  const contacts = useSelector(getFilteredContacts);\n  const filter = useSelector(getFilter);\n  const loader = useSelector(getLoader);\n\n    const dispatch = useDispatch();\n  \n  useEffect(() => {\n        dispatch(fetchContacts())\n   }, [dispatch]);\n  \n  const newContact = (name, number) => {\n    const action = addContact({name, number});\n    dispatch(action)\n  }\n \n  const removeContact = (payload) => {\n    dispatch(deleteContact(payload));\n  };\n\n const textFilter = ({target}) => {\n        dispatch(changeFilter(target.value))\n    }\n    return (\n    <SectionStyle>\n    <Section title=\"PhoneBook\">\n          <ContactForm onSubmit={newContact} contacts={contacts} />\n       </Section>\n        <Section title=\"Contacts\">\n          <Filter\n            value={filter}\n            onChange={textFilter}\n          />\n          {loader && <Loader/>}\n         <ContactList\n            contacts={contacts}\n            onDelete={removeContact}\n           />\n        </Section>\n      </SectionStyle>\n)\n}\n\nconst SectionStyle = styled.div`\n  width: 50%;\n  box-sizing: border-box;\n  padding: 15px;\n  margin: 70px auto;\n  box-shadow:  0 4px 8px 0 rgba(0,0,0,0.2);\n    transition: 0.3s;\n    border-radius: 5px;\n  background-color: #ebdacf;\n\n`;\nexport default MyContactPage;"],"names":["title","children","Title","styled","contacts","onSubmit","useState","name","setName","number","setNumber","nameInputId","shortid","numberInputId","updateInput","event","target","value","reset","Form","e","preventDefault","find","contact","toast","FormLabel","htmlFor","FormInput","type","id","onChange","pattern","required","FormBtn","onDelete","map","ListItem","ListBtn","onClick","FilterLabel","FilterInput","Load","getFilteredContacts","filter","items","normalizedFilter","toLowerCase","includes","getFilter","getLoader","loading","SectionStyle","useSelector","loader","dispatch","useDispatch","useEffect","fetchContacts","action","addContact","changeFilter","payload","deleteContact"],"sourceRoot":""}