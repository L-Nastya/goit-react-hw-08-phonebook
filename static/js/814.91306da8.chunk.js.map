{"version":3,"file":"static/js/814.91306da8.chunk.js","mappings":"yQA4EA,EAzEkB,SAAC,GAAgB,IAAfA,EAAc,EAAdA,SAChB,GAAwBC,EAAAA,EAAAA,UAAS,IAAjC,eAAOC,EAAP,KAAaC,EAAb,KACA,GAA0BF,EAAAA,EAAAA,UAAS,IAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAgCJ,EAAAA,EAAAA,UAAS,IAAzC,eAAOK,EAAP,KAAiBC,EAAjB,KAEMC,EAAc,SAAAC,GAChB,OAAQA,EAAMC,OAAOR,MACjB,IAAK,OACDC,EAAQM,EAAMC,OAAOC,OACrB,MACJ,IAAK,QACDN,EAASI,EAAMC,OAAOC,OACtB,MACH,IAAK,WACFJ,EAAYE,EAAMC,OAAOC,OACzB,MACJ,QACI,SASNC,EAAQ,WACVT,EAAQ,IACRE,EAAS,IACTE,EAAY,KAGhB,OACQ,UAACM,EAAD,CAASb,SAZG,SAACc,GACjBA,EAAEC,iBACFf,EAASE,EAAKE,EAAME,GACpBM,KASI,WACK,UAACI,EAAD,CAAYC,QAAQ,GAApB,kBACA,SAACC,EAAD,CACIC,KAAK,OACLjB,KAAK,OACLS,MAAOT,EACPkB,SAAUZ,EACVa,YAAY,aACZC,QAAQ,yHACRC,MAAM,yIACNC,UAAQ,QAGZ,UAACR,EAAD,CAAYC,QAAQ,GAApB,mBACC,SAACC,EAAD,CACGC,KAAK,QACLjB,KAAK,QACLS,MAAOP,EACPgB,SAAUZ,EACVa,YAAY,cACZG,UAAQ,QAGZ,UAACR,EAAD,CAAYC,QAAQ,GAApB,sBACC,SAACC,EAAD,CACGC,KAAK,WACLjB,KAAK,WACLS,MAAOL,EACPc,SAAUZ,EACVa,YAAY,iBACZG,UAAQ,QAIb,SAACC,EAAD,CAAUN,KAAK,SAAf,uBAQVN,EAAUa,EAAAA,GAAAA,KAAH,6EAMPV,EAAaU,EAAAA,GAAAA,MAAH,sHAOVR,EAAaQ,EAAAA,GAAAA,MAAH,6CAIVD,EAAWC,EAAAA,GAAAA,OAAH,2S,UClEd,EAnBkB,WACd,IAAMC,GAAWC,EAAAA,EAAAA,MACjB,GAA0BC,EAAAA,EAAAA,IAAYC,EAAAA,IAA/BC,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAMf,OACI,UAACC,EAAD,YACI,SAACC,EAAD,0BACA,SAAC,EAAD,CAAWlC,SAPJ,SAACE,EAAKE,EAAME,GACvBqB,GAASQ,EAAAA,EAAAA,IAAQ,CAACjC,KAAAA,EAAKE,MAAAA,EAAME,SAAAA,QAOxByB,IAAU,SAACK,EAAD,CAAcC,MAAO,CAACC,MAAO,OAA7B,SAAsCN,QASvDC,EAAeP,EAAAA,GAAAA,IAAH,uEAKZQ,EAAaR,EAAAA,GAAAA,GAAH,iHAOVU,EAAeV,EAAAA,GAAAA,EAAH","sources":["components/LoginPage/LoginForm/loginForm.jsx","components/LoginPage/loginPage.jsx"],"sourcesContent":["import { useState } from \"react\";\nimport styled from \"styled-components\";\n\nconst LoginForm = ({onSubmit}) => {\n    const [name, setName] = useState('');\n    const [email, setEmail] = useState('');\n    const [password, setPassword] = useState('');\n\n    const updateInput = event => {\n        switch (event.target.name) {\n            case 'name':\n                setName(event.target.value)\n                break;\n            case 'email':\n                setEmail(event.target.value)\n                break;\n             case 'password':\n                setPassword(event.target.value)\n                break;\n            default:\n                return;\n        }\n    };\n\n       const authForm = (e) => {\n        e.preventDefault();\n        onSubmit(name,email,password)\n        reset();\n    };\n    const reset = () => {\n        setName('' )\n        setEmail('')\n        setPassword('')\n    }\n\n    return (\n            <LogForm onSubmit={authForm}>\n                 <LoginLabel htmlFor=''>Name\n                 <LoginInput\n                     type=\"text\"\n                     name=\"name\"\n                     value={name}\n                     onChange={updateInput}\n                     placeholder=\"Enter name\"\n                     pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n                     title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n                     required\n                    />\n                 </LoginLabel>\n                 <LoginLabel htmlFor=''>Email\n                  <LoginInput\n                     type=\"email\"\n                     name=\"email\"\n                     value={email}\n                     onChange={updateInput}\n                     placeholder=\"Enter email\"\n                     required\n                    />\n                </LoginLabel>\n                 <LoginLabel htmlFor=''>Password\n                  <LoginInput\n                     type=\"password\"\n                     name=\"password\"\n                     value={password}\n                     onChange={updateInput}\n                     placeholder=\"Enter password\"\n                     required\n                    />\n                </LoginLabel>\n                \n                <LoginBtn type=\"submit\">LogIn</LoginBtn>\n            </LogForm>\n            \n        )\n}\n\nexport default LoginForm;\n\nconst LogForm = styled.form`\n  display: grid;\n  margin-left:30px;\n  width:20%;\n`;\n\nconst LoginLabel = styled.label`\ndisplay:flex;\n  font-size: 25px;\n  margin-bottom: 15px;\n  justify-content: space-between;\n`;\n\nconst LoginInput = styled.input`\n margin-left: 20px;\n`;\n\nconst LoginBtn = styled.button`\n    border: none;\n    width:100%;\n    margin-top:10px;\n    border-radius: 5px;\n    font-size: 25px;\n    color: white;\n    background-color: black;\n    box-shadow:  0 4px 8px 0 rgba(0,0,0,0.2);\n    transition: 0.3s;\n     &:hover{\n    background-color: #02a639;\n }\n`;","import { useSelector, useDispatch } from \"react-redux\";\nimport styled from \"styled-components\";\n\nimport { getUser } from \"../../redux/auth/auth-operations\";\nimport LoginForm from \"./LoginForm/loginForm\";\n\nimport { getRegisterError } from \"../../redux/auth/auth-selectors\";\n\n\n\nconst LoginPage = () => {\n    const dispatch = useDispatch();\n    const {status, message} = useSelector(getRegisterError);\n\n    const onAuth = (name,email,password) => {\n        dispatch(getUser({name,email,password}));\n    }\n\n    return (\n        <LoginWrapper>\n            <LoginTitle>LogIn Page</LoginTitle>\n            <LoginForm onSubmit={onAuth} />\n            {status && <LoginMessage style={{color: \"red\"}}>{message}</LoginMessage>}\n        </LoginWrapper>\n    )\n \n\n        \n}\nexport default LoginPage;\n\nconst LoginWrapper = styled.div`\n  height: 100vh;\n  background-color:#fdfda3;\n`;\n\nconst LoginTitle = styled.h2`\n    font-size:30px;\n    margin-top: 0px;\n    margin-left:30px;\n    padding-top:20px;\n`;\n\nconst LoginMessage = styled.p`\n font-size:15px;\n  margin-left:30px;\n`;"],"names":["onSubmit","useState","name","setName","email","setEmail","password","setPassword","updateInput","event","target","value","reset","LogForm","e","preventDefault","LoginLabel","htmlFor","LoginInput","type","onChange","placeholder","pattern","title","required","LoginBtn","styled","dispatch","useDispatch","useSelector","getRegisterError","status","message","LoginWrapper","LoginTitle","getUser","LoginMessage","style","color"],"sourceRoot":""}